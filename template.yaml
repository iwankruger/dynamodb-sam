AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  dynamodb-sam

  Sample SAM Template for dynamodb-sam
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
  # add the following to fix a default Stage from being created  
  # see post https://github.com/awslabs/serverless-application-model/issues/191#issuecomment-580412747
  Api:
    OpenApiVersion: 3.0.1  

Parameters:
  AppStage:
    Type: String
    Default: stage    

Resources:
  
  ExampleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S  
        - AttributeName: date
          AttributeType: S                      
      KeySchema:
        - AttributeName: userId
          KeyType: HASH # HASH key is how your data is partitioned
        - AttributeName: date # RANGE key is how that data is sorted within a particular HASH key
          KeyType: RANGE  
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # add role for API Gateway to access DynamoDB      
  APIDatabaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: APIDatabaseRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - "dynamodb:PutItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:DeleteItem"
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                Resource: !GetAtt ExampleTable.Arn

  ExampleApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref AppStage
      Cors: "'*'"
      DefinitionBody: 
        swagger: "2.0"
        info:
          version: "1.0"
          title: "dynamodb-sam-test"
        basePath: !Ref AppStage
        schemes:
        - "https"
        paths:
          /hello:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /items:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                '200':
                  description: "200 response"
              x-amazon-apigateway-integration:
                credentials: !GetAtt APIDatabaseRole.Arn
                uri: "arn:aws:apigateway:us-east-1:dynamodb:action/Scan"
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: "#set($inputRoot=$input.path('$'))\n[\n    #foreach($elem\
                        \ in $inputRoot.Items){\n        \"userId\":\"$elem.userId.S\",\n\
                        \        \"date\":\"$elem.date.S\"\n    }\n        #if($foreach.hasNext),\n\
                        \        #end\n    #end\n]"
                requestTemplates:
                  application/json: !Sub "{\n    \"TableName\": \"${ExampleTable}\" \n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                '200':
                  description: "200 response"
              x-amazon-apigateway-integration:
                credentials: !GetAtt APIDatabaseRole.Arn
                uri: "arn:aws:apigateway:us-east-1:dynamodb:action/PutItem"
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: !Sub "{\n    \"TableName\": \"${ExampleTable}\"\
                  ,\n    \"Item\": {\n        \"userId\": {\n            \"S\": \"$input.path('$.userId')\"\
                  \n        },\n        \"date\": {\n            \"S\": \"$input.path('$.date')\"\
                  \n        }\n    }\n    \n\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                type: "aws"

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello-world/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: post
            RestApiId: !Ref ExampleApi

  IdentityFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt HelloWorldFunction.Arn 
      Principal: apigateway.amazonaws.com                 


Outputs:
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ExampleApi}.execute-api.${AWS::Region}.amazonaws.com/${AppStage}/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  ExampleTable:
    Description: "Database"
    Value: !Ref ExampleTable
  APIDatabaseRole: 
    Description: "API Gateway DB integration role"
    Value: !Ref APIDatabaseRole

